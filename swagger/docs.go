// Package swagger GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2021-11-19 20:26:04.347098472 +0100 CET m=+0.159059576
package swagger

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Tommy Chu",
            "email": "pro@chutommy.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/certs": {
            "post": {
                "description": "Nahraje certifikát do služby keystore a umožní příslušnému daňovému poplatníkovi odesílat e-tržby v systému EET Gateway.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Certifikáty"
                ],
                "summary": "Nahrát certifikát daňového poplatníka",
                "operationId": "storeCert",
                "parameters": [
                    {
                        "description": "Tělo požadavku na nahrání certifikátu.",
                        "name": "cert_id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/StoreCertificateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Dotaz byl úspěšně zpracovaný.",
                        "schema": {
                            "$ref": "#/definitions/SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Vložený certifikát daňového poplatníka je neplatný.",
                        "schema": {
                            "$ref": "#/definitions/GatewayErrorResponse"
                        }
                    },
                    "409": {
                        "description": "ID certifikátu je již zabraný. Konfliktní certifikát musí být odstraněn nebo pro tento zvoleno jiné ID.",
                        "schema": {
                            "$ref": "#/definitions/GatewayErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Naskytla se neočekávaná chyba databáze.",
                        "schema": {
                            "$ref": "#/definitions/GatewayErrorResponse"
                        }
                    },
                    "503": {
                        "description": "Služba keystore je nedostupná.",
                        "schema": {
                            "$ref": "#/definitions/GatewayErrorResponse"
                        }
                    }
                }
            }
        },
        "/ping": {
            "get": {
                "description": "Ověří stav API služby EET Gateway, keystore (službu spravující databázi) a spojení se servery správce daně.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "API"
                ],
                "summary": "Ověřit stav EETG API",
                "operationId": "ping",
                "responses": {
                    "200": {
                        "description": "Všechny EETG komponenty jsou dostupné.",
                        "schema": {
                            "$ref": "#/definitions/PingResponse"
                        }
                    },
                    "503": {
                        "description": "Některé EETG komponeny jsou nedostupné.",
                        "schema": {
                            "$ref": "#/definitions/PingResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "GatewayErrorResponse": {
            "type": "object",
            "properties": {
                "gateway_error": {
                    "type": "string",
                    "example": "keystore service unavailable"
                }
            }
        },
        "PingResponse": {
            "type": "object",
            "properties": {
                "eet_gateway": {
                    "type": "string",
                    "example": "online"
                },
                "keystore": {
                    "type": "string",
                    "example": "online"
                },
                "tax_admin": {
                    "type": "string",
                    "example": "online"
                }
            }
        },
        "StoreCertificateRequest": {
            "type": "object",
            "required": [
                "cert_id",
                "cert_password",
                "pkcs12_data",
                "pkcs12_password"
            ],
            "properties": {
                "cert_id": {
                    "type": "string",
                    "example": "d406ccda-1bc5-44ab-a081-af6e8740634c"
                },
                "cert_password": {
                    "type": "string",
                    "example": "10f47cc7eb3c51"
                },
                "pkcs12_data": {
                    "type": "string",
                    "format": "base64",
                    "example": "MIIPoq7Huhj ... HXJBdPA="
                },
                "pkcs12_password": {
                    "type": "string",
                    "example": "1234"
                }
            }
        },
        "SuccessResponse": {
            "type": "object",
            "properties": {
                "cert_id": {
                    "type": "string",
                    "example": "d406ccda-1bc5-44ab-a081-af6e8740634c"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "localhost:8080",
	BasePath:    "/v1",
	Schemes:     []string{"http", "https"},
	Title:       "EET Gateway API",
	Description: "Specifikace REST API služby EET Gateway.",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register("swagger", &s{})
}
