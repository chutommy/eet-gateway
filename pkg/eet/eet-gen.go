// Code generated by wsdlgen. DO NOT EDIT.

// Package eet
//
package eet

import (
	"bytes"
	"context"
	"encoding/base64"
	"encoding/xml"
	"fmt"
	"io"
	"net/http"
	"time"
)

// May be one of SHA1
type BkpDigestType string

type BkpElementType struct {
	BkpType  BkpType         `xml:",chardata" json:"bkpType,omitempty"`
	Digest   BkpDigestType   `xml:"digest,attr" json:"digest,omitempty"`
	Encoding BkpEncodingType `xml:"encoding,attr" json:"encoding,omitempty"`
}

// May be one of base16
type BkpEncodingType string

// Must match the pattern [0-9a-fA-F]{8}-[0-9a-fA-F]{8}-[0-9a-fA-F]{8}-[0-9a-fA-F]{8}-[0-9a-fA-F]{8}
type BkpType string

// Must match the pattern CZ[0-9]{8,10}
type CZDICType string

// Must match the pattern ((0|-?[1-9]\d{0,7})\.\d\d|-0\.(0[1-9]|[1-9]\d))
type CastkaType float64

type DateTime time.Time

func (t *DateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t DateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

// Must match the pattern [0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}-[0-9a-fA-F]{2}
type FikType string

type OdpovedChybaType struct {
	Zprava string `xml:",chardata" json:"zprava,omitempty"`
	Kod    int    `xml:"kod,attr" json:"kod,omitempty"`
	Test   bool   `xml:"test,attr,omitempty" json:"test,omitempty"`
}

type OdpovedHlavickaType struct {
	Uuidzpravy UUIDType `xml:"uuid_zpravy,attr,omitempty" json:"uuidzpravy,omitempty"`
	Bkp        BkpType  `xml:"bkp,attr,omitempty" json:"bkp,omitempty"`
	Datprij    DateTime `xml:"dat_prij,attr,omitempty" json:"datprij,omitempty"`
	Datodmit   DateTime `xml:"dat_odmit,attr,omitempty" json:"datodmit,omitempty"`
}

type OdpovedPotvrzeniType struct {
	Fik  FikType `xml:"fik,attr" json:"fik,omitempty"`
	Test bool    `xml:"test,attr,omitempty" json:"test,omitempty"`
}

type OdpovedType struct {
	Hlavicka  OdpovedHlavickaType   `xml:"Hlavicka,omitempty" json:"hlavicka,omitempty"`
	Potvrzeni OdpovedPotvrzeniType  `xml:"Potvrzeni,omitempty" json:"potvrzeni,omitempty"`
	Chyba     OdpovedChybaType      `xml:"Chyba,omitempty" json:"chyba,omitempty"`
	Varovani  []OdpovedVarovaniType `xml:"Varovani,omitempty" json:"varovani,omitempty"`
}

type OdpovedVarovaniType struct {
	Kodvarov int `xml:"kod_varov,attr" json:"kodvarov,omitempty"`
}

// May be one of RSA2048
type PkpCipherType string

// May be one of SHA256
type PkpDigestType string

type PkpElementType struct {
	PkpType  PkpType         `xml:",chardata" json:"pkpType,omitempty"`
	Digest   PkpDigestType   `xml:"digest,attr" json:"digest,omitempty"`
	Cipher   PkpCipherType   `xml:"cipher,attr" json:"cipher,omitempty"`
	Encoding PkpEncodingType `xml:"encoding,attr" json:"encoding,omitempty"`
}

// May be one of base64
type PkpEncodingType string

type PkpType []byte

func (t *PkpType) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t PkpType) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

// May be one of 0, 1
type RezimType int

// Must match the pattern [0-9a-zA-Z\.,:;/#\-_ ]{1,20}
type String20 string

// Must match the pattern [0-9a-zA-Z\.,:;/#\-_ ]{1,25}
type String25 string

type TrzbaDataType struct {
	Dicpopl         CZDICType  `xml:"dic_popl,attr" json:"dicpopl,omitempty"`
	Dicpoverujiciho CZDICType  `xml:"dic_poverujiciho,attr,omitempty" json:"dicpoverujiciho,omitempty"`
	Idprovoz        int        `xml:"id_provoz,attr" json:"idprovoz,omitempty"`
	Idpokl          String20   `xml:"id_pokl,attr" json:"idpokl,omitempty"`
	Poradcis        String25   `xml:"porad_cis,attr" json:"poradcis,omitempty"`
	Dattrzby        DateTime   `xml:"dat_trzby,attr" json:"dattrzby,omitempty"`
	Celktrzba       CastkaType `xml:"celk_trzba,attr" json:"celktrzba,omitempty"`
	Zaklnepodldph   CastkaType `xml:"zakl_nepodl_dph,attr,omitempty" json:"zaklnepodldph,omitempty"`
	Zakldan1        CastkaType `xml:"zakl_dan1,attr,omitempty" json:"zakldan1,omitempty"`
	Dan1            CastkaType `xml:"dan1,attr,omitempty" json:"dan1,omitempty"`
	Zakldan2        CastkaType `xml:"zakl_dan2,attr,omitempty" json:"zakldan2,omitempty"`
	Dan2            CastkaType `xml:"dan2,attr,omitempty" json:"dan2,omitempty"`
	Zakldan3        CastkaType `xml:"zakl_dan3,attr,omitempty" json:"zakldan3,omitempty"`
	Dan3            CastkaType `xml:"dan3,attr,omitempty" json:"dan3,omitempty"`
	Cestsluz        CastkaType `xml:"cest_sluz,attr,omitempty" json:"cestsluz,omitempty"`
	Pouzitzboz1     CastkaType `xml:"pouzit_zboz1,attr,omitempty" json:"pouzitzboz1,omitempty"`
	Pouzitzboz2     CastkaType `xml:"pouzit_zboz2,attr,omitempty" json:"pouzitzboz2,omitempty"`
	Pouzitzboz3     CastkaType `xml:"pouzit_zboz3,attr,omitempty" json:"pouzitzboz3,omitempty"`
	Urcenocerpzuct  CastkaType `xml:"urceno_cerp_zuct,attr,omitempty" json:"urcenocerpzuct,omitempty"`
	Cerpzuct        CastkaType `xml:"cerp_zuct,attr,omitempty" json:"cerpzuct,omitempty"`
	Rezim           RezimType  `xml:"rezim,attr" json:"rezim,omitempty"`
}

type TrzbaHlavickaType struct {
	Uuidzpravy   UUIDType `xml:"uuid_zpravy,attr" json:"uuidzpravy,omitempty"`
	Datodesl     DateTime `xml:"dat_odesl,attr" json:"datodesl,omitempty"`
	Prvnizaslani bool     `xml:"prvni_zaslani,attr" json:"prvnizaslani,omitempty"`
	Overeni      bool     `xml:"overeni,attr,omitempty" json:"overeni,omitempty"`
}

type TrzbaKontrolniKodyType struct {
	Pkp PkpElementType `xml:"pkp" json:"pkp,omitempty"`
	Bkp BkpElementType `xml:"bkp" json:"bkp,omitempty"`
}

type TrzbaType struct {
	Hlavicka      TrzbaHlavickaType      `xml:"Hlavicka" json:"hlavicka,omitempty"`
	Data          TrzbaDataType          `xml:"Data" json:"data,omitempty"`
	KontrolniKody TrzbaKontrolniKodyType `xml:"KontrolniKody" json:"kontrolniKody,omitempty"`
}

// Must match the pattern [0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}
type UUIDType string

type xsdBase64Binary []byte

func (b *xsdBase64Binary) UnmarshalText(text []byte) (err error) {
	*b, err = base64.StdEncoding.DecodeString(string(text))
	return
}
func (b xsdBase64Binary) MarshalText() ([]byte, error) {
	var buf bytes.Buffer
	enc := base64.NewEncoder(base64.StdEncoding, &buf)
	enc.Write([]byte(b))
	enc.Close()
	return buf.Bytes(), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type Client struct {
	HTTPClient   *http.Client                        `json:"httpClient,omitempty"`
	ResponseHook func(*http.Response) *http.Response `json:"responseHook,omitempty"`
	RequestHook  func(*http.Request) *http.Request   `json:"requestHook,omitempty"`
}
type soapEnvelope struct {
	XMLName struct{} `xml:"http://schemas.xmlsoap.org/soap/envelope/ Envelope" json:"xmlName,omitempty"`
	Header  []byte   `xml:"http://schemas.xmlsoap.org/soap/envelope/ Header" json:"header,omitempty"`
	Body    struct {
		Message interface{} `json:"message,omitempty"`
		Fault   *struct {
			String string `xml:"faultstring,omitempty" json:"string,omitempty"`
			Code   string `xml:"faultcode,omitempty" json:"code,omitempty"`
			Detail string `xml:"detail,omitempty" json:"detail,omitempty"`
		} `xml:"http://schemas.xmlsoap.org/soap/envelope/ Fault,omitempty" json:"fault,omitempty"`
	} `xml:"http://schemas.xmlsoap.org/soap/envelope/ Body" json:"body,omitempty"`
}

func (c *Client) do(ctx context.Context, method, uri, action string, in, out interface{}) error {
	var body io.Reader
	var envelope soapEnvelope
	if method == "POST" || method == "PUT" {
		var buf bytes.Buffer
		envelope.Body.Message = in
		enc := xml.NewEncoder(&buf)
		if err := enc.Encode(envelope); err != nil {
			return err
		}
		if err := enc.Flush(); err != nil {
			return err
		}
		body = &buf
	}
	req, err := http.NewRequest(method, uri, body)
	if err != nil {
		return err
	}
	req.Header.Set("SOAPAction", action)
	req = req.WithContext(ctx)
	if c.RequestHook != nil {
		req = c.RequestHook(req)
	}
	httpClient := c.HTTPClient
	if httpClient == nil {
		httpClient = http.DefaultClient
	}
	rsp, err := httpClient.Do(req)
	if err != nil {
		return err
	}
	defer rsp.Body.Close()
	if c.ResponseHook != nil {
		rsp = c.ResponseHook(rsp)
	}
	dec := xml.NewDecoder(rsp.Body)
	envelope.Body.Message = out
	if err := dec.Decode(&envelope); err != nil {
		return err
	}
	if envelope.Body.Fault != nil {
		return fmt.Errorf("%s: %s", envelope.Body.Fault.Code, envelope.Body.Fault.String)
	}
	return nil
}
