// Code generated by mockery v2.9.4. DO NOT EDIT.

// EETGateway - Tommy Chu

package mocks

import (
	context "context"

	eet "github.com/chutommy/eetgateway/pkg/eet"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// DeleteID provides a mock function with given fields: ctx, id
func (_m *Service) DeleteID(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListCertIDs provides a mock function with given fields: ctx
func (_m *Service) ListCertIDs(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields: ctx
func (_m *Service) Ping(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendSale provides a mock function with given fields: ctx, certID, pk, trzba
func (_m *Service) SendSale(ctx context.Context, certID string, pk []byte, trzba *eet.TrzbaType) (*eet.OdpovedType, error) {
	ret := _m.Called(ctx, certID, pk, trzba)

	var r0 *eet.OdpovedType
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte, *eet.TrzbaType) *eet.OdpovedType); ok {
		r0 = rf(ctx, certID, pk, trzba)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eet.OdpovedType)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, []byte, *eet.TrzbaType) error); ok {
		r1 = rf(ctx, certID, pk, trzba)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreCert provides a mock function with given fields: ctx, certID, password, pkcsData, pkcsPassword
func (_m *Service) StoreCert(ctx context.Context, certID string, password []byte, pkcsData []byte, pkcsPassword string) error {
	ret := _m.Called(ctx, certID, password, pkcsData, pkcsPassword)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte, []byte, string) error); ok {
		r0 = rf(ctx, certID, password, pkcsData, pkcsPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCertID provides a mock function with given fields: ctx, oldID, newID
func (_m *Service) UpdateCertID(ctx context.Context, oldID string, newID string) error {
	ret := _m.Called(ctx, oldID, newID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, oldID, newID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCertPassword provides a mock function with given fields: ctx, id, oldPassword, newPassword
func (_m *Service) UpdateCertPassword(ctx context.Context, id string, oldPassword []byte, newPassword []byte) error {
	ret := _m.Called(ctx, id, oldPassword, newPassword)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte, []byte) error); ok {
		r0 = rf(ctx, id, oldPassword, newPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
